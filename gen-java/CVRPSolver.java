/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-21")
public class CVRPSolver {

  public interface Iface {

    public List<List<Long>> solveCVRP(List<List<Long>> vec, List<Long> demands, List<Long> v_caps) throws org.apache.thrift.TException;

    public List<List<Long>> solveCVRPTW(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime) throws org.apache.thrift.TException;

    public List<List<Long>> solveCVRPTWMD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots) throws org.apache.thrift.TException;

    public List<List<Long>> solveCVRPTWPD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void solveCVRP(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void solveCVRPTW(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void solveCVRPTWMD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void solveCVRPTWPD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<Long>> solveCVRP(List<List<Long>> vec, List<Long> demands, List<Long> v_caps) throws org.apache.thrift.TException
    {
      send_solveCVRP(vec, demands, v_caps);
      return recv_solveCVRP();
    }

    public void send_solveCVRP(List<List<Long>> vec, List<Long> demands, List<Long> v_caps) throws org.apache.thrift.TException
    {
      solveCVRP_args args = new solveCVRP_args();
      args.setVec(vec);
      args.setDemands(demands);
      args.setV_caps(v_caps);
      sendBase("solveCVRP", args);
    }

    public List<List<Long>> recv_solveCVRP() throws org.apache.thrift.TException
    {
      solveCVRP_result result = new solveCVRP_result();
      receiveBase(result, "solveCVRP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "solveCVRP failed: unknown result");
    }

    public List<List<Long>> solveCVRPTW(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime) throws org.apache.thrift.TException
    {
      send_solveCVRPTW(vec, demands, v_caps, timeWindows, serviceTime);
      return recv_solveCVRPTW();
    }

    public void send_solveCVRPTW(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime) throws org.apache.thrift.TException
    {
      solveCVRPTW_args args = new solveCVRPTW_args();
      args.setVec(vec);
      args.setDemands(demands);
      args.setV_caps(v_caps);
      args.setTimeWindows(timeWindows);
      args.setServiceTime(serviceTime);
      sendBase("solveCVRPTW", args);
    }

    public List<List<Long>> recv_solveCVRPTW() throws org.apache.thrift.TException
    {
      solveCVRPTW_result result = new solveCVRPTW_result();
      receiveBase(result, "solveCVRPTW");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "solveCVRPTW failed: unknown result");
    }

    public List<List<Long>> solveCVRPTWMD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots) throws org.apache.thrift.TException
    {
      send_solveCVRPTWMD(vec, demands, v_caps, timeWindows, serviceTime, depots);
      return recv_solveCVRPTWMD();
    }

    public void send_solveCVRPTWMD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots) throws org.apache.thrift.TException
    {
      solveCVRPTWMD_args args = new solveCVRPTWMD_args();
      args.setVec(vec);
      args.setDemands(demands);
      args.setV_caps(v_caps);
      args.setTimeWindows(timeWindows);
      args.setServiceTime(serviceTime);
      args.setDepots(depots);
      sendBase("solveCVRPTWMD", args);
    }

    public List<List<Long>> recv_solveCVRPTWMD() throws org.apache.thrift.TException
    {
      solveCVRPTWMD_result result = new solveCVRPTWMD_result();
      receiveBase(result, "solveCVRPTWMD");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "solveCVRPTWMD failed: unknown result");
    }

    public List<List<Long>> solveCVRPTWPD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs) throws org.apache.thrift.TException
    {
      send_solveCVRPTWPD(vec, demands, v_caps, timeWindows, serviceTime, pickups, delivs);
      return recv_solveCVRPTWPD();
    }

    public void send_solveCVRPTWPD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs) throws org.apache.thrift.TException
    {
      solveCVRPTWPD_args args = new solveCVRPTWPD_args();
      args.setVec(vec);
      args.setDemands(demands);
      args.setV_caps(v_caps);
      args.setTimeWindows(timeWindows);
      args.setServiceTime(serviceTime);
      args.setPickups(pickups);
      args.setDelivs(delivs);
      sendBase("solveCVRPTWPD", args);
    }

    public List<List<Long>> recv_solveCVRPTWPD() throws org.apache.thrift.TException
    {
      solveCVRPTWPD_result result = new solveCVRPTWPD_result();
      receiveBase(result, "solveCVRPTWPD");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "solveCVRPTWPD failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void solveCVRP(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      solveCVRP_call method_call = new solveCVRP_call(vec, demands, v_caps, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class solveCVRP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Long>> vec;
      private List<Long> demands;
      private List<Long> v_caps;
      public solveCVRP_call(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vec = vec;
        this.demands = demands;
        this.v_caps = v_caps;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("solveCVRP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        solveCVRP_args args = new solveCVRP_args();
        args.setVec(vec);
        args.setDemands(demands);
        args.setV_caps(v_caps);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_solveCVRP();
      }
    }

    public void solveCVRPTW(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      solveCVRPTW_call method_call = new solveCVRPTW_call(vec, demands, v_caps, timeWindows, serviceTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class solveCVRPTW_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Long>> vec;
      private List<Long> demands;
      private List<Long> v_caps;
      private List<List<Long>> timeWindows;
      private List<Long> serviceTime;
      public solveCVRPTW_call(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vec = vec;
        this.demands = demands;
        this.v_caps = v_caps;
        this.timeWindows = timeWindows;
        this.serviceTime = serviceTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("solveCVRPTW", org.apache.thrift.protocol.TMessageType.CALL, 0));
        solveCVRPTW_args args = new solveCVRPTW_args();
        args.setVec(vec);
        args.setDemands(demands);
        args.setV_caps(v_caps);
        args.setTimeWindows(timeWindows);
        args.setServiceTime(serviceTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_solveCVRPTW();
      }
    }

    public void solveCVRPTWMD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      solveCVRPTWMD_call method_call = new solveCVRPTWMD_call(vec, demands, v_caps, timeWindows, serviceTime, depots, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class solveCVRPTWMD_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Long>> vec;
      private List<Long> demands;
      private List<Long> v_caps;
      private List<List<Long>> timeWindows;
      private List<Long> serviceTime;
      private List<List<Long>> depots;
      public solveCVRPTWMD_call(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<List<Long>> depots, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vec = vec;
        this.demands = demands;
        this.v_caps = v_caps;
        this.timeWindows = timeWindows;
        this.serviceTime = serviceTime;
        this.depots = depots;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("solveCVRPTWMD", org.apache.thrift.protocol.TMessageType.CALL, 0));
        solveCVRPTWMD_args args = new solveCVRPTWMD_args();
        args.setVec(vec);
        args.setDemands(demands);
        args.setV_caps(v_caps);
        args.setTimeWindows(timeWindows);
        args.setServiceTime(serviceTime);
        args.setDepots(depots);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_solveCVRPTWMD();
      }
    }

    public void solveCVRPTWPD(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      solveCVRPTWPD_call method_call = new solveCVRPTWPD_call(vec, demands, v_caps, timeWindows, serviceTime, pickups, delivs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class solveCVRPTWPD_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Long>> vec;
      private List<Long> demands;
      private List<Long> v_caps;
      private List<List<Long>> timeWindows;
      private List<Long> serviceTime;
      private List<Long> pickups;
      private List<Long> delivs;
      public solveCVRPTWPD_call(List<List<Long>> vec, List<Long> demands, List<Long> v_caps, List<List<Long>> timeWindows, List<Long> serviceTime, List<Long> pickups, List<Long> delivs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vec = vec;
        this.demands = demands;
        this.v_caps = v_caps;
        this.timeWindows = timeWindows;
        this.serviceTime = serviceTime;
        this.pickups = pickups;
        this.delivs = delivs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("solveCVRPTWPD", org.apache.thrift.protocol.TMessageType.CALL, 0));
        solveCVRPTWPD_args args = new solveCVRPTWPD_args();
        args.setVec(vec);
        args.setDemands(demands);
        args.setV_caps(v_caps);
        args.setTimeWindows(timeWindows);
        args.setServiceTime(serviceTime);
        args.setPickups(pickups);
        args.setDelivs(delivs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_solveCVRPTWPD();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("solveCVRP", new solveCVRP());
      processMap.put("solveCVRPTW", new solveCVRPTW());
      processMap.put("solveCVRPTWMD", new solveCVRPTWMD());
      processMap.put("solveCVRPTWPD", new solveCVRPTWPD());
      return processMap;
    }

    public static class solveCVRP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, solveCVRP_args> {
      public solveCVRP() {
        super("solveCVRP");
      }

      public solveCVRP_args getEmptyArgsInstance() {
        return new solveCVRP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public solveCVRP_result getResult(I iface, solveCVRP_args args) throws org.apache.thrift.TException {
        solveCVRP_result result = new solveCVRP_result();
        result.success = iface.solveCVRP(args.vec, args.demands, args.v_caps);
        return result;
      }
    }

    public static class solveCVRPTW<I extends Iface> extends org.apache.thrift.ProcessFunction<I, solveCVRPTW_args> {
      public solveCVRPTW() {
        super("solveCVRPTW");
      }

      public solveCVRPTW_args getEmptyArgsInstance() {
        return new solveCVRPTW_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public solveCVRPTW_result getResult(I iface, solveCVRPTW_args args) throws org.apache.thrift.TException {
        solveCVRPTW_result result = new solveCVRPTW_result();
        result.success = iface.solveCVRPTW(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime);
        return result;
      }
    }

    public static class solveCVRPTWMD<I extends Iface> extends org.apache.thrift.ProcessFunction<I, solveCVRPTWMD_args> {
      public solveCVRPTWMD() {
        super("solveCVRPTWMD");
      }

      public solveCVRPTWMD_args getEmptyArgsInstance() {
        return new solveCVRPTWMD_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public solveCVRPTWMD_result getResult(I iface, solveCVRPTWMD_args args) throws org.apache.thrift.TException {
        solveCVRPTWMD_result result = new solveCVRPTWMD_result();
        result.success = iface.solveCVRPTWMD(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.depots);
        return result;
      }
    }

    public static class solveCVRPTWPD<I extends Iface> extends org.apache.thrift.ProcessFunction<I, solveCVRPTWPD_args> {
      public solveCVRPTWPD() {
        super("solveCVRPTWPD");
      }

      public solveCVRPTWPD_args getEmptyArgsInstance() {
        return new solveCVRPTWPD_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public solveCVRPTWPD_result getResult(I iface, solveCVRPTWPD_args args) throws org.apache.thrift.TException {
        solveCVRPTWPD_result result = new solveCVRPTWPD_result();
        result.success = iface.solveCVRPTWPD(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.pickups, args.delivs);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("solveCVRP", new solveCVRP());
      processMap.put("solveCVRPTW", new solveCVRPTW());
      processMap.put("solveCVRPTWMD", new solveCVRPTWMD());
      processMap.put("solveCVRPTWPD", new solveCVRPTWPD());
      return processMap;
    }

    public static class solveCVRP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, solveCVRP_args, List<List<Long>>> {
      public solveCVRP() {
        super("solveCVRP");
      }

      public solveCVRP_args getEmptyArgsInstance() {
        return new solveCVRP_args();
      }

      public AsyncMethodCallback<List<List<Long>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Long>>>() { 
          public void onComplete(List<List<Long>> o) {
            solveCVRP_result result = new solveCVRP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            solveCVRP_result result = new solveCVRP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, solveCVRP_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Long>>> resultHandler) throws TException {
        iface.solveCVRP(args.vec, args.demands, args.v_caps,resultHandler);
      }
    }

    public static class solveCVRPTW<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, solveCVRPTW_args, List<List<Long>>> {
      public solveCVRPTW() {
        super("solveCVRPTW");
      }

      public solveCVRPTW_args getEmptyArgsInstance() {
        return new solveCVRPTW_args();
      }

      public AsyncMethodCallback<List<List<Long>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Long>>>() { 
          public void onComplete(List<List<Long>> o) {
            solveCVRPTW_result result = new solveCVRPTW_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            solveCVRPTW_result result = new solveCVRPTW_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, solveCVRPTW_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Long>>> resultHandler) throws TException {
        iface.solveCVRPTW(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime,resultHandler);
      }
    }

    public static class solveCVRPTWMD<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, solveCVRPTWMD_args, List<List<Long>>> {
      public solveCVRPTWMD() {
        super("solveCVRPTWMD");
      }

      public solveCVRPTWMD_args getEmptyArgsInstance() {
        return new solveCVRPTWMD_args();
      }

      public AsyncMethodCallback<List<List<Long>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Long>>>() { 
          public void onComplete(List<List<Long>> o) {
            solveCVRPTWMD_result result = new solveCVRPTWMD_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            solveCVRPTWMD_result result = new solveCVRPTWMD_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, solveCVRPTWMD_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Long>>> resultHandler) throws TException {
        iface.solveCVRPTWMD(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.depots,resultHandler);
      }
    }

    public static class solveCVRPTWPD<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, solveCVRPTWPD_args, List<List<Long>>> {
      public solveCVRPTWPD() {
        super("solveCVRPTWPD");
      }

      public solveCVRPTWPD_args getEmptyArgsInstance() {
        return new solveCVRPTWPD_args();
      }

      public AsyncMethodCallback<List<List<Long>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Long>>>() { 
          public void onComplete(List<List<Long>> o) {
            solveCVRPTWPD_result result = new solveCVRPTWPD_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            solveCVRPTWPD_result result = new solveCVRPTWPD_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, solveCVRPTWPD_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Long>>> resultHandler) throws TException {
        iface.solveCVRPTWPD(args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.pickups, args.delivs,resultHandler);
      }
    }

  }

  public static class solveCVRP_args implements org.apache.thrift.TBase<solveCVRP_args, solveCVRP_args._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRP_args");

    private static final org.apache.thrift.protocol.TField VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("vec", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DEMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("demands", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField V_CAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("v_caps", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRP_argsTupleSchemeFactory());
    }

    public List<List<Long>> vec; // required
    public List<Long> demands; // required
    public List<Long> v_caps; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEC((short)1, "vec"),
      DEMANDS((short)2, "demands"),
      V_CAPS((short)3, "v_caps");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEC
            return VEC;
          case 2: // DEMANDS
            return DEMANDS;
          case 3: // V_CAPS
            return V_CAPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEC, new org.apache.thrift.meta_data.FieldMetaData("vec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.DEMANDS, new org.apache.thrift.meta_data.FieldMetaData("demands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.V_CAPS, new org.apache.thrift.meta_data.FieldMetaData("v_caps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRP_args.class, metaDataMap);
    }

    public solveCVRP_args() {
    }

    public solveCVRP_args(
      List<List<Long>> vec,
      List<Long> demands,
      List<Long> v_caps)
    {
      this();
      this.vec = vec;
      this.demands = demands;
      this.v_caps = v_caps;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRP_args(solveCVRP_args other) {
      if (other.isSetVec()) {
        List<List<Long>> __this__vec = new ArrayList<List<Long>>(other.vec.size());
        for (List<Long> other_element : other.vec) {
          List<Long> __this__vec_copy = new ArrayList<Long>(other_element);
          __this__vec.add(__this__vec_copy);
        }
        this.vec = __this__vec;
      }
      if (other.isSetDemands()) {
        List<Long> __this__demands = new ArrayList<Long>(other.demands);
        this.demands = __this__demands;
      }
      if (other.isSetV_caps()) {
        List<Long> __this__v_caps = new ArrayList<Long>(other.v_caps);
        this.v_caps = __this__v_caps;
      }
    }

    public solveCVRP_args deepCopy() {
      return new solveCVRP_args(this);
    }

    @Override
    public void clear() {
      this.vec = null;
      this.demands = null;
      this.v_caps = null;
    }

    public int getVecSize() {
      return (this.vec == null) ? 0 : this.vec.size();
    }

    public java.util.Iterator<List<Long>> getVecIterator() {
      return (this.vec == null) ? null : this.vec.iterator();
    }

    public void addToVec(List<Long> elem) {
      if (this.vec == null) {
        this.vec = new ArrayList<List<Long>>();
      }
      this.vec.add(elem);
    }

    public List<List<Long>> getVec() {
      return this.vec;
    }

    public solveCVRP_args setVec(List<List<Long>> vec) {
      this.vec = vec;
      return this;
    }

    public void unsetVec() {
      this.vec = null;
    }

    /** Returns true if field vec is set (has been assigned a value) and false otherwise */
    public boolean isSetVec() {
      return this.vec != null;
    }

    public void setVecIsSet(boolean value) {
      if (!value) {
        this.vec = null;
      }
    }

    public int getDemandsSize() {
      return (this.demands == null) ? 0 : this.demands.size();
    }

    public java.util.Iterator<Long> getDemandsIterator() {
      return (this.demands == null) ? null : this.demands.iterator();
    }

    public void addToDemands(long elem) {
      if (this.demands == null) {
        this.demands = new ArrayList<Long>();
      }
      this.demands.add(elem);
    }

    public List<Long> getDemands() {
      return this.demands;
    }

    public solveCVRP_args setDemands(List<Long> demands) {
      this.demands = demands;
      return this;
    }

    public void unsetDemands() {
      this.demands = null;
    }

    /** Returns true if field demands is set (has been assigned a value) and false otherwise */
    public boolean isSetDemands() {
      return this.demands != null;
    }

    public void setDemandsIsSet(boolean value) {
      if (!value) {
        this.demands = null;
      }
    }

    public int getV_capsSize() {
      return (this.v_caps == null) ? 0 : this.v_caps.size();
    }

    public java.util.Iterator<Long> getV_capsIterator() {
      return (this.v_caps == null) ? null : this.v_caps.iterator();
    }

    public void addToV_caps(long elem) {
      if (this.v_caps == null) {
        this.v_caps = new ArrayList<Long>();
      }
      this.v_caps.add(elem);
    }

    public List<Long> getV_caps() {
      return this.v_caps;
    }

    public solveCVRP_args setV_caps(List<Long> v_caps) {
      this.v_caps = v_caps;
      return this;
    }

    public void unsetV_caps() {
      this.v_caps = null;
    }

    /** Returns true if field v_caps is set (has been assigned a value) and false otherwise */
    public boolean isSetV_caps() {
      return this.v_caps != null;
    }

    public void setV_capsIsSet(boolean value) {
      if (!value) {
        this.v_caps = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEC:
        if (value == null) {
          unsetVec();
        } else {
          setVec((List<List<Long>>)value);
        }
        break;

      case DEMANDS:
        if (value == null) {
          unsetDemands();
        } else {
          setDemands((List<Long>)value);
        }
        break;

      case V_CAPS:
        if (value == null) {
          unsetV_caps();
        } else {
          setV_caps((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEC:
        return getVec();

      case DEMANDS:
        return getDemands();

      case V_CAPS:
        return getV_caps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEC:
        return isSetVec();
      case DEMANDS:
        return isSetDemands();
      case V_CAPS:
        return isSetV_caps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRP_args)
        return this.equals((solveCVRP_args)that);
      return false;
    }

    public boolean equals(solveCVRP_args that) {
      if (that == null)
        return false;

      boolean this_present_vec = true && this.isSetVec();
      boolean that_present_vec = true && that.isSetVec();
      if (this_present_vec || that_present_vec) {
        if (!(this_present_vec && that_present_vec))
          return false;
        if (!this.vec.equals(that.vec))
          return false;
      }

      boolean this_present_demands = true && this.isSetDemands();
      boolean that_present_demands = true && that.isSetDemands();
      if (this_present_demands || that_present_demands) {
        if (!(this_present_demands && that_present_demands))
          return false;
        if (!this.demands.equals(that.demands))
          return false;
      }

      boolean this_present_v_caps = true && this.isSetV_caps();
      boolean that_present_v_caps = true && that.isSetV_caps();
      if (this_present_v_caps || that_present_v_caps) {
        if (!(this_present_v_caps && that_present_v_caps))
          return false;
        if (!this.v_caps.equals(that.v_caps))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vec = true && (isSetVec());
      list.add(present_vec);
      if (present_vec)
        list.add(vec);

      boolean present_demands = true && (isSetDemands());
      list.add(present_demands);
      if (present_demands)
        list.add(demands);

      boolean present_v_caps = true && (isSetV_caps());
      list.add(present_v_caps);
      if (present_v_caps)
        list.add(v_caps);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVec()).compareTo(other.isSetVec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vec, other.vec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDemands()).compareTo(other.isSetDemands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demands, other.demands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV_caps()).compareTo(other.isSetV_caps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV_caps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_caps, other.v_caps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRP_args(");
      boolean first = true;

      sb.append("vec:");
      if (this.vec == null) {
        sb.append("null");
      } else {
        sb.append(this.vec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("demands:");
      if (this.demands == null) {
        sb.append("null");
      } else {
        sb.append(this.demands);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v_caps:");
      if (this.v_caps == null) {
        sb.append("null");
      } else {
        sb.append(this.v_caps);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRP_argsStandardSchemeFactory implements SchemeFactory {
      public solveCVRP_argsStandardScheme getScheme() {
        return new solveCVRP_argsStandardScheme();
      }
    }

    private static class solveCVRP_argsStandardScheme extends StandardScheme<solveCVRP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEC
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.vec = new ArrayList<List<Long>>(_list0.size);
                  List<Long> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new ArrayList<Long>(_list3.size);
                      long _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        _elem4 = iprot.readI64();
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.vec.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setVecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.demands = new ArrayList<Long>(_list6.size);
                  long _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    _elem7 = iprot.readI64();
                    struct.demands.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setDemandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V_CAPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                  struct.v_caps = new ArrayList<Long>(_list9.size);
                  long _elem10;
                  for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                  {
                    _elem10 = iprot.readI64();
                    struct.v_caps.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setV_capsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vec != null) {
          oprot.writeFieldBegin(VEC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.vec.size()));
            for (List<Long> _iter12 : struct.vec)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter12.size()));
                for (long _iter13 : _iter12)
                {
                  oprot.writeI64(_iter13);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.demands != null) {
          oprot.writeFieldBegin(DEMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.demands.size()));
            for (long _iter14 : struct.demands)
            {
              oprot.writeI64(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v_caps != null) {
          oprot.writeFieldBegin(V_CAPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.v_caps.size()));
            for (long _iter15 : struct.v_caps)
            {
              oprot.writeI64(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRP_argsTupleSchemeFactory implements SchemeFactory {
      public solveCVRP_argsTupleScheme getScheme() {
        return new solveCVRP_argsTupleScheme();
      }
    }

    private static class solveCVRP_argsTupleScheme extends TupleScheme<solveCVRP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVec()) {
          optionals.set(0);
        }
        if (struct.isSetDemands()) {
          optionals.set(1);
        }
        if (struct.isSetV_caps()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVec()) {
          {
            oprot.writeI32(struct.vec.size());
            for (List<Long> _iter16 : struct.vec)
            {
              {
                oprot.writeI32(_iter16.size());
                for (long _iter17 : _iter16)
                {
                  oprot.writeI64(_iter17);
                }
              }
            }
          }
        }
        if (struct.isSetDemands()) {
          {
            oprot.writeI32(struct.demands.size());
            for (long _iter18 : struct.demands)
            {
              oprot.writeI64(_iter18);
            }
          }
        }
        if (struct.isSetV_caps()) {
          {
            oprot.writeI32(struct.v_caps.size());
            for (long _iter19 : struct.v_caps)
            {
              oprot.writeI64(_iter19);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.vec = new ArrayList<List<Long>>(_list20.size);
            List<Long> _elem21;
            for (int _i22 = 0; _i22 < _list20.size; ++_i22)
            {
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem21 = new ArrayList<Long>(_list23.size);
                long _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readI64();
                  _elem21.add(_elem24);
                }
              }
              struct.vec.add(_elem21);
            }
          }
          struct.setVecIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.demands = new ArrayList<Long>(_list26.size);
            long _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              _elem27 = iprot.readI64();
              struct.demands.add(_elem27);
            }
          }
          struct.setDemandsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.v_caps = new ArrayList<Long>(_list29.size);
            long _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI64();
              struct.v_caps.add(_elem30);
            }
          }
          struct.setV_capsIsSet(true);
        }
      }
    }

  }

  public static class solveCVRP_result implements org.apache.thrift.TBase<solveCVRP_result, solveCVRP_result._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRP_resultTupleSchemeFactory());
    }

    public List<List<Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRP_result.class, metaDataMap);
    }

    public solveCVRP_result() {
    }

    public solveCVRP_result(
      List<List<Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRP_result(solveCVRP_result other) {
      if (other.isSetSuccess()) {
        List<List<Long>> __this__success = new ArrayList<List<Long>>(other.success.size());
        for (List<Long> other_element : other.success) {
          List<Long> __this__success_copy = new ArrayList<Long>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public solveCVRP_result deepCopy() {
      return new solveCVRP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Long>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Long> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Long>>();
      }
      this.success.add(elem);
    }

    public List<List<Long>> getSuccess() {
      return this.success;
    }

    public solveCVRP_result setSuccess(List<List<Long>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRP_result)
        return this.equals((solveCVRP_result)that);
      return false;
    }

    public boolean equals(solveCVRP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRP_resultStandardSchemeFactory implements SchemeFactory {
      public solveCVRP_resultStandardScheme getScheme() {
        return new solveCVRP_resultStandardScheme();
      }
    }

    private static class solveCVRP_resultStandardScheme extends StandardScheme<solveCVRP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Long>>(_list32.size);
                  List<Long> _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    {
                      org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                      _elem33 = new ArrayList<Long>(_list35.size);
                      long _elem36;
                      for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                      {
                        _elem36 = iprot.readI64();
                        _elem33.add(_elem36);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Long> _iter38 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter38.size()));
                for (long _iter39 : _iter38)
                {
                  oprot.writeI64(_iter39);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRP_resultTupleSchemeFactory implements SchemeFactory {
      public solveCVRP_resultTupleScheme getScheme() {
        return new solveCVRP_resultTupleScheme();
      }
    }

    private static class solveCVRP_resultTupleScheme extends TupleScheme<solveCVRP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Long> _iter40 : struct.success)
            {
              {
                oprot.writeI32(_iter40.size());
                for (long _iter41 : _iter40)
                {
                  oprot.writeI64(_iter41);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Long>>(_list42.size);
            List<Long> _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              {
                org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem43 = new ArrayList<Long>(_list45.size);
                long _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readI64();
                  _elem43.add(_elem46);
                }
              }
              struct.success.add(_elem43);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTW_args implements org.apache.thrift.TBase<solveCVRPTW_args, solveCVRPTW_args._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTW_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTW_args");

    private static final org.apache.thrift.protocol.TField VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("vec", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DEMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("demands", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField V_CAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("v_caps", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_WINDOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeWindows", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SERVICE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceTime", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTW_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTW_argsTupleSchemeFactory());
    }

    public List<List<Long>> vec; // required
    public List<Long> demands; // required
    public List<Long> v_caps; // required
    public List<List<Long>> timeWindows; // required
    public List<Long> serviceTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEC((short)1, "vec"),
      DEMANDS((short)2, "demands"),
      V_CAPS((short)3, "v_caps"),
      TIME_WINDOWS((short)4, "timeWindows"),
      SERVICE_TIME((short)5, "serviceTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEC
            return VEC;
          case 2: // DEMANDS
            return DEMANDS;
          case 3: // V_CAPS
            return V_CAPS;
          case 4: // TIME_WINDOWS
            return TIME_WINDOWS;
          case 5: // SERVICE_TIME
            return SERVICE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEC, new org.apache.thrift.meta_data.FieldMetaData("vec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.DEMANDS, new org.apache.thrift.meta_data.FieldMetaData("demands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.V_CAPS, new org.apache.thrift.meta_data.FieldMetaData("v_caps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TIME_WINDOWS, new org.apache.thrift.meta_data.FieldMetaData("timeWindows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.SERVICE_TIME, new org.apache.thrift.meta_data.FieldMetaData("serviceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTW_args.class, metaDataMap);
    }

    public solveCVRPTW_args() {
    }

    public solveCVRPTW_args(
      List<List<Long>> vec,
      List<Long> demands,
      List<Long> v_caps,
      List<List<Long>> timeWindows,
      List<Long> serviceTime)
    {
      this();
      this.vec = vec;
      this.demands = demands;
      this.v_caps = v_caps;
      this.timeWindows = timeWindows;
      this.serviceTime = serviceTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTW_args(solveCVRPTW_args other) {
      if (other.isSetVec()) {
        List<List<Long>> __this__vec = new ArrayList<List<Long>>(other.vec.size());
        for (List<Long> other_element : other.vec) {
          List<Long> __this__vec_copy = new ArrayList<Long>(other_element);
          __this__vec.add(__this__vec_copy);
        }
        this.vec = __this__vec;
      }
      if (other.isSetDemands()) {
        List<Long> __this__demands = new ArrayList<Long>(other.demands);
        this.demands = __this__demands;
      }
      if (other.isSetV_caps()) {
        List<Long> __this__v_caps = new ArrayList<Long>(other.v_caps);
        this.v_caps = __this__v_caps;
      }
      if (other.isSetTimeWindows()) {
        List<List<Long>> __this__timeWindows = new ArrayList<List<Long>>(other.timeWindows.size());
        for (List<Long> other_element : other.timeWindows) {
          List<Long> __this__timeWindows_copy = new ArrayList<Long>(other_element);
          __this__timeWindows.add(__this__timeWindows_copy);
        }
        this.timeWindows = __this__timeWindows;
      }
      if (other.isSetServiceTime()) {
        List<Long> __this__serviceTime = new ArrayList<Long>(other.serviceTime);
        this.serviceTime = __this__serviceTime;
      }
    }

    public solveCVRPTW_args deepCopy() {
      return new solveCVRPTW_args(this);
    }

    @Override
    public void clear() {
      this.vec = null;
      this.demands = null;
      this.v_caps = null;
      this.timeWindows = null;
      this.serviceTime = null;
    }

    public int getVecSize() {
      return (this.vec == null) ? 0 : this.vec.size();
    }

    public java.util.Iterator<List<Long>> getVecIterator() {
      return (this.vec == null) ? null : this.vec.iterator();
    }

    public void addToVec(List<Long> elem) {
      if (this.vec == null) {
        this.vec = new ArrayList<List<Long>>();
      }
      this.vec.add(elem);
    }

    public List<List<Long>> getVec() {
      return this.vec;
    }

    public solveCVRPTW_args setVec(List<List<Long>> vec) {
      this.vec = vec;
      return this;
    }

    public void unsetVec() {
      this.vec = null;
    }

    /** Returns true if field vec is set (has been assigned a value) and false otherwise */
    public boolean isSetVec() {
      return this.vec != null;
    }

    public void setVecIsSet(boolean value) {
      if (!value) {
        this.vec = null;
      }
    }

    public int getDemandsSize() {
      return (this.demands == null) ? 0 : this.demands.size();
    }

    public java.util.Iterator<Long> getDemandsIterator() {
      return (this.demands == null) ? null : this.demands.iterator();
    }

    public void addToDemands(long elem) {
      if (this.demands == null) {
        this.demands = new ArrayList<Long>();
      }
      this.demands.add(elem);
    }

    public List<Long> getDemands() {
      return this.demands;
    }

    public solveCVRPTW_args setDemands(List<Long> demands) {
      this.demands = demands;
      return this;
    }

    public void unsetDemands() {
      this.demands = null;
    }

    /** Returns true if field demands is set (has been assigned a value) and false otherwise */
    public boolean isSetDemands() {
      return this.demands != null;
    }

    public void setDemandsIsSet(boolean value) {
      if (!value) {
        this.demands = null;
      }
    }

    public int getV_capsSize() {
      return (this.v_caps == null) ? 0 : this.v_caps.size();
    }

    public java.util.Iterator<Long> getV_capsIterator() {
      return (this.v_caps == null) ? null : this.v_caps.iterator();
    }

    public void addToV_caps(long elem) {
      if (this.v_caps == null) {
        this.v_caps = new ArrayList<Long>();
      }
      this.v_caps.add(elem);
    }

    public List<Long> getV_caps() {
      return this.v_caps;
    }

    public solveCVRPTW_args setV_caps(List<Long> v_caps) {
      this.v_caps = v_caps;
      return this;
    }

    public void unsetV_caps() {
      this.v_caps = null;
    }

    /** Returns true if field v_caps is set (has been assigned a value) and false otherwise */
    public boolean isSetV_caps() {
      return this.v_caps != null;
    }

    public void setV_capsIsSet(boolean value) {
      if (!value) {
        this.v_caps = null;
      }
    }

    public int getTimeWindowsSize() {
      return (this.timeWindows == null) ? 0 : this.timeWindows.size();
    }

    public java.util.Iterator<List<Long>> getTimeWindowsIterator() {
      return (this.timeWindows == null) ? null : this.timeWindows.iterator();
    }

    public void addToTimeWindows(List<Long> elem) {
      if (this.timeWindows == null) {
        this.timeWindows = new ArrayList<List<Long>>();
      }
      this.timeWindows.add(elem);
    }

    public List<List<Long>> getTimeWindows() {
      return this.timeWindows;
    }

    public solveCVRPTW_args setTimeWindows(List<List<Long>> timeWindows) {
      this.timeWindows = timeWindows;
      return this;
    }

    public void unsetTimeWindows() {
      this.timeWindows = null;
    }

    /** Returns true if field timeWindows is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeWindows() {
      return this.timeWindows != null;
    }

    public void setTimeWindowsIsSet(boolean value) {
      if (!value) {
        this.timeWindows = null;
      }
    }

    public int getServiceTimeSize() {
      return (this.serviceTime == null) ? 0 : this.serviceTime.size();
    }

    public java.util.Iterator<Long> getServiceTimeIterator() {
      return (this.serviceTime == null) ? null : this.serviceTime.iterator();
    }

    public void addToServiceTime(long elem) {
      if (this.serviceTime == null) {
        this.serviceTime = new ArrayList<Long>();
      }
      this.serviceTime.add(elem);
    }

    public List<Long> getServiceTime() {
      return this.serviceTime;
    }

    public solveCVRPTW_args setServiceTime(List<Long> serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    public void unsetServiceTime() {
      this.serviceTime = null;
    }

    /** Returns true if field serviceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceTime() {
      return this.serviceTime != null;
    }

    public void setServiceTimeIsSet(boolean value) {
      if (!value) {
        this.serviceTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEC:
        if (value == null) {
          unsetVec();
        } else {
          setVec((List<List<Long>>)value);
        }
        break;

      case DEMANDS:
        if (value == null) {
          unsetDemands();
        } else {
          setDemands((List<Long>)value);
        }
        break;

      case V_CAPS:
        if (value == null) {
          unsetV_caps();
        } else {
          setV_caps((List<Long>)value);
        }
        break;

      case TIME_WINDOWS:
        if (value == null) {
          unsetTimeWindows();
        } else {
          setTimeWindows((List<List<Long>>)value);
        }
        break;

      case SERVICE_TIME:
        if (value == null) {
          unsetServiceTime();
        } else {
          setServiceTime((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEC:
        return getVec();

      case DEMANDS:
        return getDemands();

      case V_CAPS:
        return getV_caps();

      case TIME_WINDOWS:
        return getTimeWindows();

      case SERVICE_TIME:
        return getServiceTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEC:
        return isSetVec();
      case DEMANDS:
        return isSetDemands();
      case V_CAPS:
        return isSetV_caps();
      case TIME_WINDOWS:
        return isSetTimeWindows();
      case SERVICE_TIME:
        return isSetServiceTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTW_args)
        return this.equals((solveCVRPTW_args)that);
      return false;
    }

    public boolean equals(solveCVRPTW_args that) {
      if (that == null)
        return false;

      boolean this_present_vec = true && this.isSetVec();
      boolean that_present_vec = true && that.isSetVec();
      if (this_present_vec || that_present_vec) {
        if (!(this_present_vec && that_present_vec))
          return false;
        if (!this.vec.equals(that.vec))
          return false;
      }

      boolean this_present_demands = true && this.isSetDemands();
      boolean that_present_demands = true && that.isSetDemands();
      if (this_present_demands || that_present_demands) {
        if (!(this_present_demands && that_present_demands))
          return false;
        if (!this.demands.equals(that.demands))
          return false;
      }

      boolean this_present_v_caps = true && this.isSetV_caps();
      boolean that_present_v_caps = true && that.isSetV_caps();
      if (this_present_v_caps || that_present_v_caps) {
        if (!(this_present_v_caps && that_present_v_caps))
          return false;
        if (!this.v_caps.equals(that.v_caps))
          return false;
      }

      boolean this_present_timeWindows = true && this.isSetTimeWindows();
      boolean that_present_timeWindows = true && that.isSetTimeWindows();
      if (this_present_timeWindows || that_present_timeWindows) {
        if (!(this_present_timeWindows && that_present_timeWindows))
          return false;
        if (!this.timeWindows.equals(that.timeWindows))
          return false;
      }

      boolean this_present_serviceTime = true && this.isSetServiceTime();
      boolean that_present_serviceTime = true && that.isSetServiceTime();
      if (this_present_serviceTime || that_present_serviceTime) {
        if (!(this_present_serviceTime && that_present_serviceTime))
          return false;
        if (!this.serviceTime.equals(that.serviceTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vec = true && (isSetVec());
      list.add(present_vec);
      if (present_vec)
        list.add(vec);

      boolean present_demands = true && (isSetDemands());
      list.add(present_demands);
      if (present_demands)
        list.add(demands);

      boolean present_v_caps = true && (isSetV_caps());
      list.add(present_v_caps);
      if (present_v_caps)
        list.add(v_caps);

      boolean present_timeWindows = true && (isSetTimeWindows());
      list.add(present_timeWindows);
      if (present_timeWindows)
        list.add(timeWindows);

      boolean present_serviceTime = true && (isSetServiceTime());
      list.add(present_serviceTime);
      if (present_serviceTime)
        list.add(serviceTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTW_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVec()).compareTo(other.isSetVec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vec, other.vec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDemands()).compareTo(other.isSetDemands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demands, other.demands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV_caps()).compareTo(other.isSetV_caps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV_caps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_caps, other.v_caps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeWindows()).compareTo(other.isSetTimeWindows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeWindows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeWindows, other.timeWindows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceTime()).compareTo(other.isSetServiceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceTime, other.serviceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTW_args(");
      boolean first = true;

      sb.append("vec:");
      if (this.vec == null) {
        sb.append("null");
      } else {
        sb.append(this.vec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("demands:");
      if (this.demands == null) {
        sb.append("null");
      } else {
        sb.append(this.demands);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v_caps:");
      if (this.v_caps == null) {
        sb.append("null");
      } else {
        sb.append(this.v_caps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeWindows:");
      if (this.timeWindows == null) {
        sb.append("null");
      } else {
        sb.append(this.timeWindows);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceTime:");
      if (this.serviceTime == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTW_argsStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTW_argsStandardScheme getScheme() {
        return new solveCVRPTW_argsStandardScheme();
      }
    }

    private static class solveCVRPTW_argsStandardScheme extends StandardScheme<solveCVRPTW_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTW_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEC
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.vec = new ArrayList<List<Long>>(_list48.size);
                  List<Long> _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    {
                      org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                      _elem49 = new ArrayList<Long>(_list51.size);
                      long _elem52;
                      for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                      {
                        _elem52 = iprot.readI64();
                        _elem49.add(_elem52);
                      }
                      iprot.readListEnd();
                    }
                    struct.vec.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setVecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                  struct.demands = new ArrayList<Long>(_list54.size);
                  long _elem55;
                  for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                  {
                    _elem55 = iprot.readI64();
                    struct.demands.add(_elem55);
                  }
                  iprot.readListEnd();
                }
                struct.setDemandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V_CAPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                  struct.v_caps = new ArrayList<Long>(_list57.size);
                  long _elem58;
                  for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                  {
                    _elem58 = iprot.readI64();
                    struct.v_caps.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setV_capsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_WINDOWS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.timeWindows = new ArrayList<List<Long>>(_list60.size);
                  List<Long> _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    {
                      org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                      _elem61 = new ArrayList<Long>(_list63.size);
                      long _elem64;
                      for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                      {
                        _elem64 = iprot.readI64();
                        _elem61.add(_elem64);
                      }
                      iprot.readListEnd();
                    }
                    struct.timeWindows.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setTimeWindowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVICE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.serviceTime = new ArrayList<Long>(_list66.size);
                  long _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readI64();
                    struct.serviceTime.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setServiceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTW_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vec != null) {
          oprot.writeFieldBegin(VEC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.vec.size()));
            for (List<Long> _iter69 : struct.vec)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter69.size()));
                for (long _iter70 : _iter69)
                {
                  oprot.writeI64(_iter70);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.demands != null) {
          oprot.writeFieldBegin(DEMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.demands.size()));
            for (long _iter71 : struct.demands)
            {
              oprot.writeI64(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v_caps != null) {
          oprot.writeFieldBegin(V_CAPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.v_caps.size()));
            for (long _iter72 : struct.v_caps)
            {
              oprot.writeI64(_iter72);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeWindows != null) {
          oprot.writeFieldBegin(TIME_WINDOWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.timeWindows.size()));
            for (List<Long> _iter73 : struct.timeWindows)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter73.size()));
                for (long _iter74 : _iter73)
                {
                  oprot.writeI64(_iter74);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.serviceTime != null) {
          oprot.writeFieldBegin(SERVICE_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.serviceTime.size()));
            for (long _iter75 : struct.serviceTime)
            {
              oprot.writeI64(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTW_argsTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTW_argsTupleScheme getScheme() {
        return new solveCVRPTW_argsTupleScheme();
      }
    }

    private static class solveCVRPTW_argsTupleScheme extends TupleScheme<solveCVRPTW_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTW_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVec()) {
          optionals.set(0);
        }
        if (struct.isSetDemands()) {
          optionals.set(1);
        }
        if (struct.isSetV_caps()) {
          optionals.set(2);
        }
        if (struct.isSetTimeWindows()) {
          optionals.set(3);
        }
        if (struct.isSetServiceTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVec()) {
          {
            oprot.writeI32(struct.vec.size());
            for (List<Long> _iter76 : struct.vec)
            {
              {
                oprot.writeI32(_iter76.size());
                for (long _iter77 : _iter76)
                {
                  oprot.writeI64(_iter77);
                }
              }
            }
          }
        }
        if (struct.isSetDemands()) {
          {
            oprot.writeI32(struct.demands.size());
            for (long _iter78 : struct.demands)
            {
              oprot.writeI64(_iter78);
            }
          }
        }
        if (struct.isSetV_caps()) {
          {
            oprot.writeI32(struct.v_caps.size());
            for (long _iter79 : struct.v_caps)
            {
              oprot.writeI64(_iter79);
            }
          }
        }
        if (struct.isSetTimeWindows()) {
          {
            oprot.writeI32(struct.timeWindows.size());
            for (List<Long> _iter80 : struct.timeWindows)
            {
              {
                oprot.writeI32(_iter80.size());
                for (long _iter81 : _iter80)
                {
                  oprot.writeI64(_iter81);
                }
              }
            }
          }
        }
        if (struct.isSetServiceTime()) {
          {
            oprot.writeI32(struct.serviceTime.size());
            for (long _iter82 : struct.serviceTime)
            {
              oprot.writeI64(_iter82);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTW_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.vec = new ArrayList<List<Long>>(_list83.size);
            List<Long> _elem84;
            for (int _i85 = 0; _i85 < _list83.size; ++_i85)
            {
              {
                org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem84 = new ArrayList<Long>(_list86.size);
                long _elem87;
                for (int _i88 = 0; _i88 < _list86.size; ++_i88)
                {
                  _elem87 = iprot.readI64();
                  _elem84.add(_elem87);
                }
              }
              struct.vec.add(_elem84);
            }
          }
          struct.setVecIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.demands = new ArrayList<Long>(_list89.size);
            long _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = iprot.readI64();
              struct.demands.add(_elem90);
            }
          }
          struct.setDemandsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.v_caps = new ArrayList<Long>(_list92.size);
            long _elem93;
            for (int _i94 = 0; _i94 < _list92.size; ++_i94)
            {
              _elem93 = iprot.readI64();
              struct.v_caps.add(_elem93);
            }
          }
          struct.setV_capsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.timeWindows = new ArrayList<List<Long>>(_list95.size);
            List<Long> _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              {
                org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem96 = new ArrayList<Long>(_list98.size);
                long _elem99;
                for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                {
                  _elem99 = iprot.readI64();
                  _elem96.add(_elem99);
                }
              }
              struct.timeWindows.add(_elem96);
            }
          }
          struct.setTimeWindowsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.serviceTime = new ArrayList<Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.serviceTime.add(_elem102);
            }
          }
          struct.setServiceTimeIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTW_result implements org.apache.thrift.TBase<solveCVRPTW_result, solveCVRPTW_result._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTW_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTW_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTW_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTW_resultTupleSchemeFactory());
    }

    public List<List<Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTW_result.class, metaDataMap);
    }

    public solveCVRPTW_result() {
    }

    public solveCVRPTW_result(
      List<List<Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTW_result(solveCVRPTW_result other) {
      if (other.isSetSuccess()) {
        List<List<Long>> __this__success = new ArrayList<List<Long>>(other.success.size());
        for (List<Long> other_element : other.success) {
          List<Long> __this__success_copy = new ArrayList<Long>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public solveCVRPTW_result deepCopy() {
      return new solveCVRPTW_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Long>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Long> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Long>>();
      }
      this.success.add(elem);
    }

    public List<List<Long>> getSuccess() {
      return this.success;
    }

    public solveCVRPTW_result setSuccess(List<List<Long>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTW_result)
        return this.equals((solveCVRPTW_result)that);
      return false;
    }

    public boolean equals(solveCVRPTW_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTW_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTW_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTW_resultStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTW_resultStandardScheme getScheme() {
        return new solveCVRPTW_resultStandardScheme();
      }
    }

    private static class solveCVRPTW_resultStandardScheme extends StandardScheme<solveCVRPTW_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTW_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Long>>(_list104.size);
                  List<Long> _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    {
                      org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                      _elem105 = new ArrayList<Long>(_list107.size);
                      long _elem108;
                      for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                      {
                        _elem108 = iprot.readI64();
                        _elem105.add(_elem108);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTW_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Long> _iter110 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter110.size()));
                for (long _iter111 : _iter110)
                {
                  oprot.writeI64(_iter111);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTW_resultTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTW_resultTupleScheme getScheme() {
        return new solveCVRPTW_resultTupleScheme();
      }
    }

    private static class solveCVRPTW_resultTupleScheme extends TupleScheme<solveCVRPTW_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTW_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Long> _iter112 : struct.success)
            {
              {
                oprot.writeI32(_iter112.size());
                for (long _iter113 : _iter112)
                {
                  oprot.writeI64(_iter113);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTW_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Long>>(_list114.size);
            List<Long> _elem115;
            for (int _i116 = 0; _i116 < _list114.size; ++_i116)
            {
              {
                org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem115 = new ArrayList<Long>(_list117.size);
                long _elem118;
                for (int _i119 = 0; _i119 < _list117.size; ++_i119)
                {
                  _elem118 = iprot.readI64();
                  _elem115.add(_elem118);
                }
              }
              struct.success.add(_elem115);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTWMD_args implements org.apache.thrift.TBase<solveCVRPTWMD_args, solveCVRPTWMD_args._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTWMD_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTWMD_args");

    private static final org.apache.thrift.protocol.TField VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("vec", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DEMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("demands", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField V_CAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("v_caps", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_WINDOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeWindows", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SERVICE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceTime", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField DEPOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("depots", org.apache.thrift.protocol.TType.LIST, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTWMD_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTWMD_argsTupleSchemeFactory());
    }

    public List<List<Long>> vec; // required
    public List<Long> demands; // required
    public List<Long> v_caps; // required
    public List<List<Long>> timeWindows; // required
    public List<Long> serviceTime; // required
    public List<List<Long>> depots; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEC((short)1, "vec"),
      DEMANDS((short)2, "demands"),
      V_CAPS((short)3, "v_caps"),
      TIME_WINDOWS((short)4, "timeWindows"),
      SERVICE_TIME((short)5, "serviceTime"),
      DEPOTS((short)6, "depots");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEC
            return VEC;
          case 2: // DEMANDS
            return DEMANDS;
          case 3: // V_CAPS
            return V_CAPS;
          case 4: // TIME_WINDOWS
            return TIME_WINDOWS;
          case 5: // SERVICE_TIME
            return SERVICE_TIME;
          case 6: // DEPOTS
            return DEPOTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEC, new org.apache.thrift.meta_data.FieldMetaData("vec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.DEMANDS, new org.apache.thrift.meta_data.FieldMetaData("demands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.V_CAPS, new org.apache.thrift.meta_data.FieldMetaData("v_caps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TIME_WINDOWS, new org.apache.thrift.meta_data.FieldMetaData("timeWindows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.SERVICE_TIME, new org.apache.thrift.meta_data.FieldMetaData("serviceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.DEPOTS, new org.apache.thrift.meta_data.FieldMetaData("depots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTWMD_args.class, metaDataMap);
    }

    public solveCVRPTWMD_args() {
    }

    public solveCVRPTWMD_args(
      List<List<Long>> vec,
      List<Long> demands,
      List<Long> v_caps,
      List<List<Long>> timeWindows,
      List<Long> serviceTime,
      List<List<Long>> depots)
    {
      this();
      this.vec = vec;
      this.demands = demands;
      this.v_caps = v_caps;
      this.timeWindows = timeWindows;
      this.serviceTime = serviceTime;
      this.depots = depots;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTWMD_args(solveCVRPTWMD_args other) {
      if (other.isSetVec()) {
        List<List<Long>> __this__vec = new ArrayList<List<Long>>(other.vec.size());
        for (List<Long> other_element : other.vec) {
          List<Long> __this__vec_copy = new ArrayList<Long>(other_element);
          __this__vec.add(__this__vec_copy);
        }
        this.vec = __this__vec;
      }
      if (other.isSetDemands()) {
        List<Long> __this__demands = new ArrayList<Long>(other.demands);
        this.demands = __this__demands;
      }
      if (other.isSetV_caps()) {
        List<Long> __this__v_caps = new ArrayList<Long>(other.v_caps);
        this.v_caps = __this__v_caps;
      }
      if (other.isSetTimeWindows()) {
        List<List<Long>> __this__timeWindows = new ArrayList<List<Long>>(other.timeWindows.size());
        for (List<Long> other_element : other.timeWindows) {
          List<Long> __this__timeWindows_copy = new ArrayList<Long>(other_element);
          __this__timeWindows.add(__this__timeWindows_copy);
        }
        this.timeWindows = __this__timeWindows;
      }
      if (other.isSetServiceTime()) {
        List<Long> __this__serviceTime = new ArrayList<Long>(other.serviceTime);
        this.serviceTime = __this__serviceTime;
      }
      if (other.isSetDepots()) {
        List<List<Long>> __this__depots = new ArrayList<List<Long>>(other.depots.size());
        for (List<Long> other_element : other.depots) {
          List<Long> __this__depots_copy = new ArrayList<Long>(other_element);
          __this__depots.add(__this__depots_copy);
        }
        this.depots = __this__depots;
      }
    }

    public solveCVRPTWMD_args deepCopy() {
      return new solveCVRPTWMD_args(this);
    }

    @Override
    public void clear() {
      this.vec = null;
      this.demands = null;
      this.v_caps = null;
      this.timeWindows = null;
      this.serviceTime = null;
      this.depots = null;
    }

    public int getVecSize() {
      return (this.vec == null) ? 0 : this.vec.size();
    }

    public java.util.Iterator<List<Long>> getVecIterator() {
      return (this.vec == null) ? null : this.vec.iterator();
    }

    public void addToVec(List<Long> elem) {
      if (this.vec == null) {
        this.vec = new ArrayList<List<Long>>();
      }
      this.vec.add(elem);
    }

    public List<List<Long>> getVec() {
      return this.vec;
    }

    public solveCVRPTWMD_args setVec(List<List<Long>> vec) {
      this.vec = vec;
      return this;
    }

    public void unsetVec() {
      this.vec = null;
    }

    /** Returns true if field vec is set (has been assigned a value) and false otherwise */
    public boolean isSetVec() {
      return this.vec != null;
    }

    public void setVecIsSet(boolean value) {
      if (!value) {
        this.vec = null;
      }
    }

    public int getDemandsSize() {
      return (this.demands == null) ? 0 : this.demands.size();
    }

    public java.util.Iterator<Long> getDemandsIterator() {
      return (this.demands == null) ? null : this.demands.iterator();
    }

    public void addToDemands(long elem) {
      if (this.demands == null) {
        this.demands = new ArrayList<Long>();
      }
      this.demands.add(elem);
    }

    public List<Long> getDemands() {
      return this.demands;
    }

    public solveCVRPTWMD_args setDemands(List<Long> demands) {
      this.demands = demands;
      return this;
    }

    public void unsetDemands() {
      this.demands = null;
    }

    /** Returns true if field demands is set (has been assigned a value) and false otherwise */
    public boolean isSetDemands() {
      return this.demands != null;
    }

    public void setDemandsIsSet(boolean value) {
      if (!value) {
        this.demands = null;
      }
    }

    public int getV_capsSize() {
      return (this.v_caps == null) ? 0 : this.v_caps.size();
    }

    public java.util.Iterator<Long> getV_capsIterator() {
      return (this.v_caps == null) ? null : this.v_caps.iterator();
    }

    public void addToV_caps(long elem) {
      if (this.v_caps == null) {
        this.v_caps = new ArrayList<Long>();
      }
      this.v_caps.add(elem);
    }

    public List<Long> getV_caps() {
      return this.v_caps;
    }

    public solveCVRPTWMD_args setV_caps(List<Long> v_caps) {
      this.v_caps = v_caps;
      return this;
    }

    public void unsetV_caps() {
      this.v_caps = null;
    }

    /** Returns true if field v_caps is set (has been assigned a value) and false otherwise */
    public boolean isSetV_caps() {
      return this.v_caps != null;
    }

    public void setV_capsIsSet(boolean value) {
      if (!value) {
        this.v_caps = null;
      }
    }

    public int getTimeWindowsSize() {
      return (this.timeWindows == null) ? 0 : this.timeWindows.size();
    }

    public java.util.Iterator<List<Long>> getTimeWindowsIterator() {
      return (this.timeWindows == null) ? null : this.timeWindows.iterator();
    }

    public void addToTimeWindows(List<Long> elem) {
      if (this.timeWindows == null) {
        this.timeWindows = new ArrayList<List<Long>>();
      }
      this.timeWindows.add(elem);
    }

    public List<List<Long>> getTimeWindows() {
      return this.timeWindows;
    }

    public solveCVRPTWMD_args setTimeWindows(List<List<Long>> timeWindows) {
      this.timeWindows = timeWindows;
      return this;
    }

    public void unsetTimeWindows() {
      this.timeWindows = null;
    }

    /** Returns true if field timeWindows is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeWindows() {
      return this.timeWindows != null;
    }

    public void setTimeWindowsIsSet(boolean value) {
      if (!value) {
        this.timeWindows = null;
      }
    }

    public int getServiceTimeSize() {
      return (this.serviceTime == null) ? 0 : this.serviceTime.size();
    }

    public java.util.Iterator<Long> getServiceTimeIterator() {
      return (this.serviceTime == null) ? null : this.serviceTime.iterator();
    }

    public void addToServiceTime(long elem) {
      if (this.serviceTime == null) {
        this.serviceTime = new ArrayList<Long>();
      }
      this.serviceTime.add(elem);
    }

    public List<Long> getServiceTime() {
      return this.serviceTime;
    }

    public solveCVRPTWMD_args setServiceTime(List<Long> serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    public void unsetServiceTime() {
      this.serviceTime = null;
    }

    /** Returns true if field serviceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceTime() {
      return this.serviceTime != null;
    }

    public void setServiceTimeIsSet(boolean value) {
      if (!value) {
        this.serviceTime = null;
      }
    }

    public int getDepotsSize() {
      return (this.depots == null) ? 0 : this.depots.size();
    }

    public java.util.Iterator<List<Long>> getDepotsIterator() {
      return (this.depots == null) ? null : this.depots.iterator();
    }

    public void addToDepots(List<Long> elem) {
      if (this.depots == null) {
        this.depots = new ArrayList<List<Long>>();
      }
      this.depots.add(elem);
    }

    public List<List<Long>> getDepots() {
      return this.depots;
    }

    public solveCVRPTWMD_args setDepots(List<List<Long>> depots) {
      this.depots = depots;
      return this;
    }

    public void unsetDepots() {
      this.depots = null;
    }

    /** Returns true if field depots is set (has been assigned a value) and false otherwise */
    public boolean isSetDepots() {
      return this.depots != null;
    }

    public void setDepotsIsSet(boolean value) {
      if (!value) {
        this.depots = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEC:
        if (value == null) {
          unsetVec();
        } else {
          setVec((List<List<Long>>)value);
        }
        break;

      case DEMANDS:
        if (value == null) {
          unsetDemands();
        } else {
          setDemands((List<Long>)value);
        }
        break;

      case V_CAPS:
        if (value == null) {
          unsetV_caps();
        } else {
          setV_caps((List<Long>)value);
        }
        break;

      case TIME_WINDOWS:
        if (value == null) {
          unsetTimeWindows();
        } else {
          setTimeWindows((List<List<Long>>)value);
        }
        break;

      case SERVICE_TIME:
        if (value == null) {
          unsetServiceTime();
        } else {
          setServiceTime((List<Long>)value);
        }
        break;

      case DEPOTS:
        if (value == null) {
          unsetDepots();
        } else {
          setDepots((List<List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEC:
        return getVec();

      case DEMANDS:
        return getDemands();

      case V_CAPS:
        return getV_caps();

      case TIME_WINDOWS:
        return getTimeWindows();

      case SERVICE_TIME:
        return getServiceTime();

      case DEPOTS:
        return getDepots();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEC:
        return isSetVec();
      case DEMANDS:
        return isSetDemands();
      case V_CAPS:
        return isSetV_caps();
      case TIME_WINDOWS:
        return isSetTimeWindows();
      case SERVICE_TIME:
        return isSetServiceTime();
      case DEPOTS:
        return isSetDepots();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTWMD_args)
        return this.equals((solveCVRPTWMD_args)that);
      return false;
    }

    public boolean equals(solveCVRPTWMD_args that) {
      if (that == null)
        return false;

      boolean this_present_vec = true && this.isSetVec();
      boolean that_present_vec = true && that.isSetVec();
      if (this_present_vec || that_present_vec) {
        if (!(this_present_vec && that_present_vec))
          return false;
        if (!this.vec.equals(that.vec))
          return false;
      }

      boolean this_present_demands = true && this.isSetDemands();
      boolean that_present_demands = true && that.isSetDemands();
      if (this_present_demands || that_present_demands) {
        if (!(this_present_demands && that_present_demands))
          return false;
        if (!this.demands.equals(that.demands))
          return false;
      }

      boolean this_present_v_caps = true && this.isSetV_caps();
      boolean that_present_v_caps = true && that.isSetV_caps();
      if (this_present_v_caps || that_present_v_caps) {
        if (!(this_present_v_caps && that_present_v_caps))
          return false;
        if (!this.v_caps.equals(that.v_caps))
          return false;
      }

      boolean this_present_timeWindows = true && this.isSetTimeWindows();
      boolean that_present_timeWindows = true && that.isSetTimeWindows();
      if (this_present_timeWindows || that_present_timeWindows) {
        if (!(this_present_timeWindows && that_present_timeWindows))
          return false;
        if (!this.timeWindows.equals(that.timeWindows))
          return false;
      }

      boolean this_present_serviceTime = true && this.isSetServiceTime();
      boolean that_present_serviceTime = true && that.isSetServiceTime();
      if (this_present_serviceTime || that_present_serviceTime) {
        if (!(this_present_serviceTime && that_present_serviceTime))
          return false;
        if (!this.serviceTime.equals(that.serviceTime))
          return false;
      }

      boolean this_present_depots = true && this.isSetDepots();
      boolean that_present_depots = true && that.isSetDepots();
      if (this_present_depots || that_present_depots) {
        if (!(this_present_depots && that_present_depots))
          return false;
        if (!this.depots.equals(that.depots))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vec = true && (isSetVec());
      list.add(present_vec);
      if (present_vec)
        list.add(vec);

      boolean present_demands = true && (isSetDemands());
      list.add(present_demands);
      if (present_demands)
        list.add(demands);

      boolean present_v_caps = true && (isSetV_caps());
      list.add(present_v_caps);
      if (present_v_caps)
        list.add(v_caps);

      boolean present_timeWindows = true && (isSetTimeWindows());
      list.add(present_timeWindows);
      if (present_timeWindows)
        list.add(timeWindows);

      boolean present_serviceTime = true && (isSetServiceTime());
      list.add(present_serviceTime);
      if (present_serviceTime)
        list.add(serviceTime);

      boolean present_depots = true && (isSetDepots());
      list.add(present_depots);
      if (present_depots)
        list.add(depots);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTWMD_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVec()).compareTo(other.isSetVec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vec, other.vec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDemands()).compareTo(other.isSetDemands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demands, other.demands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV_caps()).compareTo(other.isSetV_caps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV_caps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_caps, other.v_caps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeWindows()).compareTo(other.isSetTimeWindows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeWindows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeWindows, other.timeWindows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceTime()).compareTo(other.isSetServiceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceTime, other.serviceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDepots()).compareTo(other.isSetDepots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depots, other.depots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTWMD_args(");
      boolean first = true;

      sb.append("vec:");
      if (this.vec == null) {
        sb.append("null");
      } else {
        sb.append(this.vec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("demands:");
      if (this.demands == null) {
        sb.append("null");
      } else {
        sb.append(this.demands);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v_caps:");
      if (this.v_caps == null) {
        sb.append("null");
      } else {
        sb.append(this.v_caps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeWindows:");
      if (this.timeWindows == null) {
        sb.append("null");
      } else {
        sb.append(this.timeWindows);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceTime:");
      if (this.serviceTime == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("depots:");
      if (this.depots == null) {
        sb.append("null");
      } else {
        sb.append(this.depots);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTWMD_argsStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTWMD_argsStandardScheme getScheme() {
        return new solveCVRPTWMD_argsStandardScheme();
      }
    }

    private static class solveCVRPTWMD_argsStandardScheme extends StandardScheme<solveCVRPTWMD_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTWMD_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEC
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.vec = new ArrayList<List<Long>>(_list120.size);
                  List<Long> _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    {
                      org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                      _elem121 = new ArrayList<Long>(_list123.size);
                      long _elem124;
                      for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                      {
                        _elem124 = iprot.readI64();
                        _elem121.add(_elem124);
                      }
                      iprot.readListEnd();
                    }
                    struct.vec.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setVecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.demands = new ArrayList<Long>(_list126.size);
                  long _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = iprot.readI64();
                    struct.demands.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setDemandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V_CAPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list129 = iprot.readListBegin();
                  struct.v_caps = new ArrayList<Long>(_list129.size);
                  long _elem130;
                  for (int _i131 = 0; _i131 < _list129.size; ++_i131)
                  {
                    _elem130 = iprot.readI64();
                    struct.v_caps.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setV_capsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_WINDOWS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                  struct.timeWindows = new ArrayList<List<Long>>(_list132.size);
                  List<Long> _elem133;
                  for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                  {
                    {
                      org.apache.thrift.protocol.TList _list135 = iprot.readListBegin();
                      _elem133 = new ArrayList<Long>(_list135.size);
                      long _elem136;
                      for (int _i137 = 0; _i137 < _list135.size; ++_i137)
                      {
                        _elem136 = iprot.readI64();
                        _elem133.add(_elem136);
                      }
                      iprot.readListEnd();
                    }
                    struct.timeWindows.add(_elem133);
                  }
                  iprot.readListEnd();
                }
                struct.setTimeWindowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVICE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.serviceTime = new ArrayList<Long>(_list138.size);
                  long _elem139;
                  for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                  {
                    _elem139 = iprot.readI64();
                    struct.serviceTime.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                struct.setServiceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DEPOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list141 = iprot.readListBegin();
                  struct.depots = new ArrayList<List<Long>>(_list141.size);
                  List<Long> _elem142;
                  for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                  {
                    {
                      org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                      _elem142 = new ArrayList<Long>(_list144.size);
                      long _elem145;
                      for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                      {
                        _elem145 = iprot.readI64();
                        _elem142.add(_elem145);
                      }
                      iprot.readListEnd();
                    }
                    struct.depots.add(_elem142);
                  }
                  iprot.readListEnd();
                }
                struct.setDepotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTWMD_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vec != null) {
          oprot.writeFieldBegin(VEC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.vec.size()));
            for (List<Long> _iter147 : struct.vec)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter147.size()));
                for (long _iter148 : _iter147)
                {
                  oprot.writeI64(_iter148);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.demands != null) {
          oprot.writeFieldBegin(DEMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.demands.size()));
            for (long _iter149 : struct.demands)
            {
              oprot.writeI64(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v_caps != null) {
          oprot.writeFieldBegin(V_CAPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.v_caps.size()));
            for (long _iter150 : struct.v_caps)
            {
              oprot.writeI64(_iter150);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeWindows != null) {
          oprot.writeFieldBegin(TIME_WINDOWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.timeWindows.size()));
            for (List<Long> _iter151 : struct.timeWindows)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter151.size()));
                for (long _iter152 : _iter151)
                {
                  oprot.writeI64(_iter152);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.serviceTime != null) {
          oprot.writeFieldBegin(SERVICE_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.serviceTime.size()));
            for (long _iter153 : struct.serviceTime)
            {
              oprot.writeI64(_iter153);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.depots != null) {
          oprot.writeFieldBegin(DEPOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.depots.size()));
            for (List<Long> _iter154 : struct.depots)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter154.size()));
                for (long _iter155 : _iter154)
                {
                  oprot.writeI64(_iter155);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTWMD_argsTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTWMD_argsTupleScheme getScheme() {
        return new solveCVRPTWMD_argsTupleScheme();
      }
    }

    private static class solveCVRPTWMD_argsTupleScheme extends TupleScheme<solveCVRPTWMD_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWMD_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVec()) {
          optionals.set(0);
        }
        if (struct.isSetDemands()) {
          optionals.set(1);
        }
        if (struct.isSetV_caps()) {
          optionals.set(2);
        }
        if (struct.isSetTimeWindows()) {
          optionals.set(3);
        }
        if (struct.isSetServiceTime()) {
          optionals.set(4);
        }
        if (struct.isSetDepots()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetVec()) {
          {
            oprot.writeI32(struct.vec.size());
            for (List<Long> _iter156 : struct.vec)
            {
              {
                oprot.writeI32(_iter156.size());
                for (long _iter157 : _iter156)
                {
                  oprot.writeI64(_iter157);
                }
              }
            }
          }
        }
        if (struct.isSetDemands()) {
          {
            oprot.writeI32(struct.demands.size());
            for (long _iter158 : struct.demands)
            {
              oprot.writeI64(_iter158);
            }
          }
        }
        if (struct.isSetV_caps()) {
          {
            oprot.writeI32(struct.v_caps.size());
            for (long _iter159 : struct.v_caps)
            {
              oprot.writeI64(_iter159);
            }
          }
        }
        if (struct.isSetTimeWindows()) {
          {
            oprot.writeI32(struct.timeWindows.size());
            for (List<Long> _iter160 : struct.timeWindows)
            {
              {
                oprot.writeI32(_iter160.size());
                for (long _iter161 : _iter160)
                {
                  oprot.writeI64(_iter161);
                }
              }
            }
          }
        }
        if (struct.isSetServiceTime()) {
          {
            oprot.writeI32(struct.serviceTime.size());
            for (long _iter162 : struct.serviceTime)
            {
              oprot.writeI64(_iter162);
            }
          }
        }
        if (struct.isSetDepots()) {
          {
            oprot.writeI32(struct.depots.size());
            for (List<Long> _iter163 : struct.depots)
            {
              {
                oprot.writeI32(_iter163.size());
                for (long _iter164 : _iter163)
                {
                  oprot.writeI64(_iter164);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWMD_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.vec = new ArrayList<List<Long>>(_list165.size);
            List<Long> _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              {
                org.apache.thrift.protocol.TList _list168 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem166 = new ArrayList<Long>(_list168.size);
                long _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = iprot.readI64();
                  _elem166.add(_elem169);
                }
              }
              struct.vec.add(_elem166);
            }
          }
          struct.setVecIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.demands = new ArrayList<Long>(_list171.size);
            long _elem172;
            for (int _i173 = 0; _i173 < _list171.size; ++_i173)
            {
              _elem172 = iprot.readI64();
              struct.demands.add(_elem172);
            }
          }
          struct.setDemandsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list174 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.v_caps = new ArrayList<Long>(_list174.size);
            long _elem175;
            for (int _i176 = 0; _i176 < _list174.size; ++_i176)
            {
              _elem175 = iprot.readI64();
              struct.v_caps.add(_elem175);
            }
          }
          struct.setV_capsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.timeWindows = new ArrayList<List<Long>>(_list177.size);
            List<Long> _elem178;
            for (int _i179 = 0; _i179 < _list177.size; ++_i179)
            {
              {
                org.apache.thrift.protocol.TList _list180 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem178 = new ArrayList<Long>(_list180.size);
                long _elem181;
                for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                {
                  _elem181 = iprot.readI64();
                  _elem178.add(_elem181);
                }
              }
              struct.timeWindows.add(_elem178);
            }
          }
          struct.setTimeWindowsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.serviceTime = new ArrayList<Long>(_list183.size);
            long _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = iprot.readI64();
              struct.serviceTime.add(_elem184);
            }
          }
          struct.setServiceTimeIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.depots = new ArrayList<List<Long>>(_list186.size);
            List<Long> _elem187;
            for (int _i188 = 0; _i188 < _list186.size; ++_i188)
            {
              {
                org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem187 = new ArrayList<Long>(_list189.size);
                long _elem190;
                for (int _i191 = 0; _i191 < _list189.size; ++_i191)
                {
                  _elem190 = iprot.readI64();
                  _elem187.add(_elem190);
                }
              }
              struct.depots.add(_elem187);
            }
          }
          struct.setDepotsIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTWMD_result implements org.apache.thrift.TBase<solveCVRPTWMD_result, solveCVRPTWMD_result._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTWMD_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTWMD_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTWMD_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTWMD_resultTupleSchemeFactory());
    }

    public List<List<Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTWMD_result.class, metaDataMap);
    }

    public solveCVRPTWMD_result() {
    }

    public solveCVRPTWMD_result(
      List<List<Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTWMD_result(solveCVRPTWMD_result other) {
      if (other.isSetSuccess()) {
        List<List<Long>> __this__success = new ArrayList<List<Long>>(other.success.size());
        for (List<Long> other_element : other.success) {
          List<Long> __this__success_copy = new ArrayList<Long>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public solveCVRPTWMD_result deepCopy() {
      return new solveCVRPTWMD_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Long>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Long> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Long>>();
      }
      this.success.add(elem);
    }

    public List<List<Long>> getSuccess() {
      return this.success;
    }

    public solveCVRPTWMD_result setSuccess(List<List<Long>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTWMD_result)
        return this.equals((solveCVRPTWMD_result)that);
      return false;
    }

    public boolean equals(solveCVRPTWMD_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTWMD_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTWMD_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTWMD_resultStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTWMD_resultStandardScheme getScheme() {
        return new solveCVRPTWMD_resultStandardScheme();
      }
    }

    private static class solveCVRPTWMD_resultStandardScheme extends StandardScheme<solveCVRPTWMD_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTWMD_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Long>>(_list192.size);
                  List<Long> _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    {
                      org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                      _elem193 = new ArrayList<Long>(_list195.size);
                      long _elem196;
                      for (int _i197 = 0; _i197 < _list195.size; ++_i197)
                      {
                        _elem196 = iprot.readI64();
                        _elem193.add(_elem196);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTWMD_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Long> _iter198 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter198.size()));
                for (long _iter199 : _iter198)
                {
                  oprot.writeI64(_iter199);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTWMD_resultTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTWMD_resultTupleScheme getScheme() {
        return new solveCVRPTWMD_resultTupleScheme();
      }
    }

    private static class solveCVRPTWMD_resultTupleScheme extends TupleScheme<solveCVRPTWMD_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWMD_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Long> _iter200 : struct.success)
            {
              {
                oprot.writeI32(_iter200.size());
                for (long _iter201 : _iter200)
                {
                  oprot.writeI64(_iter201);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWMD_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Long>>(_list202.size);
            List<Long> _elem203;
            for (int _i204 = 0; _i204 < _list202.size; ++_i204)
            {
              {
                org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem203 = new ArrayList<Long>(_list205.size);
                long _elem206;
                for (int _i207 = 0; _i207 < _list205.size; ++_i207)
                {
                  _elem206 = iprot.readI64();
                  _elem203.add(_elem206);
                }
              }
              struct.success.add(_elem203);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTWPD_args implements org.apache.thrift.TBase<solveCVRPTWPD_args, solveCVRPTWPD_args._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTWPD_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTWPD_args");

    private static final org.apache.thrift.protocol.TField VEC_FIELD_DESC = new org.apache.thrift.protocol.TField("vec", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DEMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("demands", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField V_CAPS_FIELD_DESC = new org.apache.thrift.protocol.TField("v_caps", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_WINDOWS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeWindows", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SERVICE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceTime", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField PICKUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("pickups", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField DELIVS_FIELD_DESC = new org.apache.thrift.protocol.TField("delivs", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTWPD_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTWPD_argsTupleSchemeFactory());
    }

    public List<List<Long>> vec; // required
    public List<Long> demands; // required
    public List<Long> v_caps; // required
    public List<List<Long>> timeWindows; // required
    public List<Long> serviceTime; // required
    public List<Long> pickups; // required
    public List<Long> delivs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEC((short)1, "vec"),
      DEMANDS((short)2, "demands"),
      V_CAPS((short)3, "v_caps"),
      TIME_WINDOWS((short)4, "timeWindows"),
      SERVICE_TIME((short)5, "serviceTime"),
      PICKUPS((short)6, "pickups"),
      DELIVS((short)7, "delivs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEC
            return VEC;
          case 2: // DEMANDS
            return DEMANDS;
          case 3: // V_CAPS
            return V_CAPS;
          case 4: // TIME_WINDOWS
            return TIME_WINDOWS;
          case 5: // SERVICE_TIME
            return SERVICE_TIME;
          case 6: // PICKUPS
            return PICKUPS;
          case 7: // DELIVS
            return DELIVS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEC, new org.apache.thrift.meta_data.FieldMetaData("vec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.DEMANDS, new org.apache.thrift.meta_data.FieldMetaData("demands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.V_CAPS, new org.apache.thrift.meta_data.FieldMetaData("v_caps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TIME_WINDOWS, new org.apache.thrift.meta_data.FieldMetaData("timeWindows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      tmpMap.put(_Fields.SERVICE_TIME, new org.apache.thrift.meta_data.FieldMetaData("serviceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.PICKUPS, new org.apache.thrift.meta_data.FieldMetaData("pickups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.DELIVS, new org.apache.thrift.meta_data.FieldMetaData("delivs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTWPD_args.class, metaDataMap);
    }

    public solveCVRPTWPD_args() {
    }

    public solveCVRPTWPD_args(
      List<List<Long>> vec,
      List<Long> demands,
      List<Long> v_caps,
      List<List<Long>> timeWindows,
      List<Long> serviceTime,
      List<Long> pickups,
      List<Long> delivs)
    {
      this();
      this.vec = vec;
      this.demands = demands;
      this.v_caps = v_caps;
      this.timeWindows = timeWindows;
      this.serviceTime = serviceTime;
      this.pickups = pickups;
      this.delivs = delivs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTWPD_args(solveCVRPTWPD_args other) {
      if (other.isSetVec()) {
        List<List<Long>> __this__vec = new ArrayList<List<Long>>(other.vec.size());
        for (List<Long> other_element : other.vec) {
          List<Long> __this__vec_copy = new ArrayList<Long>(other_element);
          __this__vec.add(__this__vec_copy);
        }
        this.vec = __this__vec;
      }
      if (other.isSetDemands()) {
        List<Long> __this__demands = new ArrayList<Long>(other.demands);
        this.demands = __this__demands;
      }
      if (other.isSetV_caps()) {
        List<Long> __this__v_caps = new ArrayList<Long>(other.v_caps);
        this.v_caps = __this__v_caps;
      }
      if (other.isSetTimeWindows()) {
        List<List<Long>> __this__timeWindows = new ArrayList<List<Long>>(other.timeWindows.size());
        for (List<Long> other_element : other.timeWindows) {
          List<Long> __this__timeWindows_copy = new ArrayList<Long>(other_element);
          __this__timeWindows.add(__this__timeWindows_copy);
        }
        this.timeWindows = __this__timeWindows;
      }
      if (other.isSetServiceTime()) {
        List<Long> __this__serviceTime = new ArrayList<Long>(other.serviceTime);
        this.serviceTime = __this__serviceTime;
      }
      if (other.isSetPickups()) {
        List<Long> __this__pickups = new ArrayList<Long>(other.pickups);
        this.pickups = __this__pickups;
      }
      if (other.isSetDelivs()) {
        List<Long> __this__delivs = new ArrayList<Long>(other.delivs);
        this.delivs = __this__delivs;
      }
    }

    public solveCVRPTWPD_args deepCopy() {
      return new solveCVRPTWPD_args(this);
    }

    @Override
    public void clear() {
      this.vec = null;
      this.demands = null;
      this.v_caps = null;
      this.timeWindows = null;
      this.serviceTime = null;
      this.pickups = null;
      this.delivs = null;
    }

    public int getVecSize() {
      return (this.vec == null) ? 0 : this.vec.size();
    }

    public java.util.Iterator<List<Long>> getVecIterator() {
      return (this.vec == null) ? null : this.vec.iterator();
    }

    public void addToVec(List<Long> elem) {
      if (this.vec == null) {
        this.vec = new ArrayList<List<Long>>();
      }
      this.vec.add(elem);
    }

    public List<List<Long>> getVec() {
      return this.vec;
    }

    public solveCVRPTWPD_args setVec(List<List<Long>> vec) {
      this.vec = vec;
      return this;
    }

    public void unsetVec() {
      this.vec = null;
    }

    /** Returns true if field vec is set (has been assigned a value) and false otherwise */
    public boolean isSetVec() {
      return this.vec != null;
    }

    public void setVecIsSet(boolean value) {
      if (!value) {
        this.vec = null;
      }
    }

    public int getDemandsSize() {
      return (this.demands == null) ? 0 : this.demands.size();
    }

    public java.util.Iterator<Long> getDemandsIterator() {
      return (this.demands == null) ? null : this.demands.iterator();
    }

    public void addToDemands(long elem) {
      if (this.demands == null) {
        this.demands = new ArrayList<Long>();
      }
      this.demands.add(elem);
    }

    public List<Long> getDemands() {
      return this.demands;
    }

    public solveCVRPTWPD_args setDemands(List<Long> demands) {
      this.demands = demands;
      return this;
    }

    public void unsetDemands() {
      this.demands = null;
    }

    /** Returns true if field demands is set (has been assigned a value) and false otherwise */
    public boolean isSetDemands() {
      return this.demands != null;
    }

    public void setDemandsIsSet(boolean value) {
      if (!value) {
        this.demands = null;
      }
    }

    public int getV_capsSize() {
      return (this.v_caps == null) ? 0 : this.v_caps.size();
    }

    public java.util.Iterator<Long> getV_capsIterator() {
      return (this.v_caps == null) ? null : this.v_caps.iterator();
    }

    public void addToV_caps(long elem) {
      if (this.v_caps == null) {
        this.v_caps = new ArrayList<Long>();
      }
      this.v_caps.add(elem);
    }

    public List<Long> getV_caps() {
      return this.v_caps;
    }

    public solveCVRPTWPD_args setV_caps(List<Long> v_caps) {
      this.v_caps = v_caps;
      return this;
    }

    public void unsetV_caps() {
      this.v_caps = null;
    }

    /** Returns true if field v_caps is set (has been assigned a value) and false otherwise */
    public boolean isSetV_caps() {
      return this.v_caps != null;
    }

    public void setV_capsIsSet(boolean value) {
      if (!value) {
        this.v_caps = null;
      }
    }

    public int getTimeWindowsSize() {
      return (this.timeWindows == null) ? 0 : this.timeWindows.size();
    }

    public java.util.Iterator<List<Long>> getTimeWindowsIterator() {
      return (this.timeWindows == null) ? null : this.timeWindows.iterator();
    }

    public void addToTimeWindows(List<Long> elem) {
      if (this.timeWindows == null) {
        this.timeWindows = new ArrayList<List<Long>>();
      }
      this.timeWindows.add(elem);
    }

    public List<List<Long>> getTimeWindows() {
      return this.timeWindows;
    }

    public solveCVRPTWPD_args setTimeWindows(List<List<Long>> timeWindows) {
      this.timeWindows = timeWindows;
      return this;
    }

    public void unsetTimeWindows() {
      this.timeWindows = null;
    }

    /** Returns true if field timeWindows is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeWindows() {
      return this.timeWindows != null;
    }

    public void setTimeWindowsIsSet(boolean value) {
      if (!value) {
        this.timeWindows = null;
      }
    }

    public int getServiceTimeSize() {
      return (this.serviceTime == null) ? 0 : this.serviceTime.size();
    }

    public java.util.Iterator<Long> getServiceTimeIterator() {
      return (this.serviceTime == null) ? null : this.serviceTime.iterator();
    }

    public void addToServiceTime(long elem) {
      if (this.serviceTime == null) {
        this.serviceTime = new ArrayList<Long>();
      }
      this.serviceTime.add(elem);
    }

    public List<Long> getServiceTime() {
      return this.serviceTime;
    }

    public solveCVRPTWPD_args setServiceTime(List<Long> serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    public void unsetServiceTime() {
      this.serviceTime = null;
    }

    /** Returns true if field serviceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceTime() {
      return this.serviceTime != null;
    }

    public void setServiceTimeIsSet(boolean value) {
      if (!value) {
        this.serviceTime = null;
      }
    }

    public int getPickupsSize() {
      return (this.pickups == null) ? 0 : this.pickups.size();
    }

    public java.util.Iterator<Long> getPickupsIterator() {
      return (this.pickups == null) ? null : this.pickups.iterator();
    }

    public void addToPickups(long elem) {
      if (this.pickups == null) {
        this.pickups = new ArrayList<Long>();
      }
      this.pickups.add(elem);
    }

    public List<Long> getPickups() {
      return this.pickups;
    }

    public solveCVRPTWPD_args setPickups(List<Long> pickups) {
      this.pickups = pickups;
      return this;
    }

    public void unsetPickups() {
      this.pickups = null;
    }

    /** Returns true if field pickups is set (has been assigned a value) and false otherwise */
    public boolean isSetPickups() {
      return this.pickups != null;
    }

    public void setPickupsIsSet(boolean value) {
      if (!value) {
        this.pickups = null;
      }
    }

    public int getDelivsSize() {
      return (this.delivs == null) ? 0 : this.delivs.size();
    }

    public java.util.Iterator<Long> getDelivsIterator() {
      return (this.delivs == null) ? null : this.delivs.iterator();
    }

    public void addToDelivs(long elem) {
      if (this.delivs == null) {
        this.delivs = new ArrayList<Long>();
      }
      this.delivs.add(elem);
    }

    public List<Long> getDelivs() {
      return this.delivs;
    }

    public solveCVRPTWPD_args setDelivs(List<Long> delivs) {
      this.delivs = delivs;
      return this;
    }

    public void unsetDelivs() {
      this.delivs = null;
    }

    /** Returns true if field delivs is set (has been assigned a value) and false otherwise */
    public boolean isSetDelivs() {
      return this.delivs != null;
    }

    public void setDelivsIsSet(boolean value) {
      if (!value) {
        this.delivs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEC:
        if (value == null) {
          unsetVec();
        } else {
          setVec((List<List<Long>>)value);
        }
        break;

      case DEMANDS:
        if (value == null) {
          unsetDemands();
        } else {
          setDemands((List<Long>)value);
        }
        break;

      case V_CAPS:
        if (value == null) {
          unsetV_caps();
        } else {
          setV_caps((List<Long>)value);
        }
        break;

      case TIME_WINDOWS:
        if (value == null) {
          unsetTimeWindows();
        } else {
          setTimeWindows((List<List<Long>>)value);
        }
        break;

      case SERVICE_TIME:
        if (value == null) {
          unsetServiceTime();
        } else {
          setServiceTime((List<Long>)value);
        }
        break;

      case PICKUPS:
        if (value == null) {
          unsetPickups();
        } else {
          setPickups((List<Long>)value);
        }
        break;

      case DELIVS:
        if (value == null) {
          unsetDelivs();
        } else {
          setDelivs((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEC:
        return getVec();

      case DEMANDS:
        return getDemands();

      case V_CAPS:
        return getV_caps();

      case TIME_WINDOWS:
        return getTimeWindows();

      case SERVICE_TIME:
        return getServiceTime();

      case PICKUPS:
        return getPickups();

      case DELIVS:
        return getDelivs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEC:
        return isSetVec();
      case DEMANDS:
        return isSetDemands();
      case V_CAPS:
        return isSetV_caps();
      case TIME_WINDOWS:
        return isSetTimeWindows();
      case SERVICE_TIME:
        return isSetServiceTime();
      case PICKUPS:
        return isSetPickups();
      case DELIVS:
        return isSetDelivs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTWPD_args)
        return this.equals((solveCVRPTWPD_args)that);
      return false;
    }

    public boolean equals(solveCVRPTWPD_args that) {
      if (that == null)
        return false;

      boolean this_present_vec = true && this.isSetVec();
      boolean that_present_vec = true && that.isSetVec();
      if (this_present_vec || that_present_vec) {
        if (!(this_present_vec && that_present_vec))
          return false;
        if (!this.vec.equals(that.vec))
          return false;
      }

      boolean this_present_demands = true && this.isSetDemands();
      boolean that_present_demands = true && that.isSetDemands();
      if (this_present_demands || that_present_demands) {
        if (!(this_present_demands && that_present_demands))
          return false;
        if (!this.demands.equals(that.demands))
          return false;
      }

      boolean this_present_v_caps = true && this.isSetV_caps();
      boolean that_present_v_caps = true && that.isSetV_caps();
      if (this_present_v_caps || that_present_v_caps) {
        if (!(this_present_v_caps && that_present_v_caps))
          return false;
        if (!this.v_caps.equals(that.v_caps))
          return false;
      }

      boolean this_present_timeWindows = true && this.isSetTimeWindows();
      boolean that_present_timeWindows = true && that.isSetTimeWindows();
      if (this_present_timeWindows || that_present_timeWindows) {
        if (!(this_present_timeWindows && that_present_timeWindows))
          return false;
        if (!this.timeWindows.equals(that.timeWindows))
          return false;
      }

      boolean this_present_serviceTime = true && this.isSetServiceTime();
      boolean that_present_serviceTime = true && that.isSetServiceTime();
      if (this_present_serviceTime || that_present_serviceTime) {
        if (!(this_present_serviceTime && that_present_serviceTime))
          return false;
        if (!this.serviceTime.equals(that.serviceTime))
          return false;
      }

      boolean this_present_pickups = true && this.isSetPickups();
      boolean that_present_pickups = true && that.isSetPickups();
      if (this_present_pickups || that_present_pickups) {
        if (!(this_present_pickups && that_present_pickups))
          return false;
        if (!this.pickups.equals(that.pickups))
          return false;
      }

      boolean this_present_delivs = true && this.isSetDelivs();
      boolean that_present_delivs = true && that.isSetDelivs();
      if (this_present_delivs || that_present_delivs) {
        if (!(this_present_delivs && that_present_delivs))
          return false;
        if (!this.delivs.equals(that.delivs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vec = true && (isSetVec());
      list.add(present_vec);
      if (present_vec)
        list.add(vec);

      boolean present_demands = true && (isSetDemands());
      list.add(present_demands);
      if (present_demands)
        list.add(demands);

      boolean present_v_caps = true && (isSetV_caps());
      list.add(present_v_caps);
      if (present_v_caps)
        list.add(v_caps);

      boolean present_timeWindows = true && (isSetTimeWindows());
      list.add(present_timeWindows);
      if (present_timeWindows)
        list.add(timeWindows);

      boolean present_serviceTime = true && (isSetServiceTime());
      list.add(present_serviceTime);
      if (present_serviceTime)
        list.add(serviceTime);

      boolean present_pickups = true && (isSetPickups());
      list.add(present_pickups);
      if (present_pickups)
        list.add(pickups);

      boolean present_delivs = true && (isSetDelivs());
      list.add(present_delivs);
      if (present_delivs)
        list.add(delivs);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTWPD_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVec()).compareTo(other.isSetVec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vec, other.vec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDemands()).compareTo(other.isSetDemands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDemands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demands, other.demands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetV_caps()).compareTo(other.isSetV_caps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV_caps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v_caps, other.v_caps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeWindows()).compareTo(other.isSetTimeWindows());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeWindows()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeWindows, other.timeWindows);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceTime()).compareTo(other.isSetServiceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceTime, other.serviceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPickups()).compareTo(other.isSetPickups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPickups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pickups, other.pickups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelivs()).compareTo(other.isSetDelivs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelivs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delivs, other.delivs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTWPD_args(");
      boolean first = true;

      sb.append("vec:");
      if (this.vec == null) {
        sb.append("null");
      } else {
        sb.append(this.vec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("demands:");
      if (this.demands == null) {
        sb.append("null");
      } else {
        sb.append(this.demands);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v_caps:");
      if (this.v_caps == null) {
        sb.append("null");
      } else {
        sb.append(this.v_caps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeWindows:");
      if (this.timeWindows == null) {
        sb.append("null");
      } else {
        sb.append(this.timeWindows);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceTime:");
      if (this.serviceTime == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pickups:");
      if (this.pickups == null) {
        sb.append("null");
      } else {
        sb.append(this.pickups);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delivs:");
      if (this.delivs == null) {
        sb.append("null");
      } else {
        sb.append(this.delivs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTWPD_argsStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTWPD_argsStandardScheme getScheme() {
        return new solveCVRPTWPD_argsStandardScheme();
      }
    }

    private static class solveCVRPTWPD_argsStandardScheme extends StandardScheme<solveCVRPTWPD_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTWPD_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEC
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.vec = new ArrayList<List<Long>>(_list208.size);
                  List<Long> _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    {
                      org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                      _elem209 = new ArrayList<Long>(_list211.size);
                      long _elem212;
                      for (int _i213 = 0; _i213 < _list211.size; ++_i213)
                      {
                        _elem212 = iprot.readI64();
                        _elem209.add(_elem212);
                      }
                      iprot.readListEnd();
                    }
                    struct.vec.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setVecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                  struct.demands = new ArrayList<Long>(_list214.size);
                  long _elem215;
                  for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                  {
                    _elem215 = iprot.readI64();
                    struct.demands.add(_elem215);
                  }
                  iprot.readListEnd();
                }
                struct.setDemandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V_CAPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                  struct.v_caps = new ArrayList<Long>(_list217.size);
                  long _elem218;
                  for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                  {
                    _elem218 = iprot.readI64();
                    struct.v_caps.add(_elem218);
                  }
                  iprot.readListEnd();
                }
                struct.setV_capsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_WINDOWS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                  struct.timeWindows = new ArrayList<List<Long>>(_list220.size);
                  List<Long> _elem221;
                  for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                  {
                    {
                      org.apache.thrift.protocol.TList _list223 = iprot.readListBegin();
                      _elem221 = new ArrayList<Long>(_list223.size);
                      long _elem224;
                      for (int _i225 = 0; _i225 < _list223.size; ++_i225)
                      {
                        _elem224 = iprot.readI64();
                        _elem221.add(_elem224);
                      }
                      iprot.readListEnd();
                    }
                    struct.timeWindows.add(_elem221);
                  }
                  iprot.readListEnd();
                }
                struct.setTimeWindowsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SERVICE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                  struct.serviceTime = new ArrayList<Long>(_list226.size);
                  long _elem227;
                  for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                  {
                    _elem227 = iprot.readI64();
                    struct.serviceTime.add(_elem227);
                  }
                  iprot.readListEnd();
                }
                struct.setServiceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PICKUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list229 = iprot.readListBegin();
                  struct.pickups = new ArrayList<Long>(_list229.size);
                  long _elem230;
                  for (int _i231 = 0; _i231 < _list229.size; ++_i231)
                  {
                    _elem230 = iprot.readI64();
                    struct.pickups.add(_elem230);
                  }
                  iprot.readListEnd();
                }
                struct.setPickupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DELIVS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.delivs = new ArrayList<Long>(_list232.size);
                  long _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = iprot.readI64();
                    struct.delivs.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setDelivsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTWPD_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vec != null) {
          oprot.writeFieldBegin(VEC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.vec.size()));
            for (List<Long> _iter235 : struct.vec)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter235.size()));
                for (long _iter236 : _iter235)
                {
                  oprot.writeI64(_iter236);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.demands != null) {
          oprot.writeFieldBegin(DEMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.demands.size()));
            for (long _iter237 : struct.demands)
            {
              oprot.writeI64(_iter237);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.v_caps != null) {
          oprot.writeFieldBegin(V_CAPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.v_caps.size()));
            for (long _iter238 : struct.v_caps)
            {
              oprot.writeI64(_iter238);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeWindows != null) {
          oprot.writeFieldBegin(TIME_WINDOWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.timeWindows.size()));
            for (List<Long> _iter239 : struct.timeWindows)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter239.size()));
                for (long _iter240 : _iter239)
                {
                  oprot.writeI64(_iter240);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.serviceTime != null) {
          oprot.writeFieldBegin(SERVICE_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.serviceTime.size()));
            for (long _iter241 : struct.serviceTime)
            {
              oprot.writeI64(_iter241);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pickups != null) {
          oprot.writeFieldBegin(PICKUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.pickups.size()));
            for (long _iter242 : struct.pickups)
            {
              oprot.writeI64(_iter242);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.delivs != null) {
          oprot.writeFieldBegin(DELIVS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.delivs.size()));
            for (long _iter243 : struct.delivs)
            {
              oprot.writeI64(_iter243);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTWPD_argsTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTWPD_argsTupleScheme getScheme() {
        return new solveCVRPTWPD_argsTupleScheme();
      }
    }

    private static class solveCVRPTWPD_argsTupleScheme extends TupleScheme<solveCVRPTWPD_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWPD_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVec()) {
          optionals.set(0);
        }
        if (struct.isSetDemands()) {
          optionals.set(1);
        }
        if (struct.isSetV_caps()) {
          optionals.set(2);
        }
        if (struct.isSetTimeWindows()) {
          optionals.set(3);
        }
        if (struct.isSetServiceTime()) {
          optionals.set(4);
        }
        if (struct.isSetPickups()) {
          optionals.set(5);
        }
        if (struct.isSetDelivs()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetVec()) {
          {
            oprot.writeI32(struct.vec.size());
            for (List<Long> _iter244 : struct.vec)
            {
              {
                oprot.writeI32(_iter244.size());
                for (long _iter245 : _iter244)
                {
                  oprot.writeI64(_iter245);
                }
              }
            }
          }
        }
        if (struct.isSetDemands()) {
          {
            oprot.writeI32(struct.demands.size());
            for (long _iter246 : struct.demands)
            {
              oprot.writeI64(_iter246);
            }
          }
        }
        if (struct.isSetV_caps()) {
          {
            oprot.writeI32(struct.v_caps.size());
            for (long _iter247 : struct.v_caps)
            {
              oprot.writeI64(_iter247);
            }
          }
        }
        if (struct.isSetTimeWindows()) {
          {
            oprot.writeI32(struct.timeWindows.size());
            for (List<Long> _iter248 : struct.timeWindows)
            {
              {
                oprot.writeI32(_iter248.size());
                for (long _iter249 : _iter248)
                {
                  oprot.writeI64(_iter249);
                }
              }
            }
          }
        }
        if (struct.isSetServiceTime()) {
          {
            oprot.writeI32(struct.serviceTime.size());
            for (long _iter250 : struct.serviceTime)
            {
              oprot.writeI64(_iter250);
            }
          }
        }
        if (struct.isSetPickups()) {
          {
            oprot.writeI32(struct.pickups.size());
            for (long _iter251 : struct.pickups)
            {
              oprot.writeI64(_iter251);
            }
          }
        }
        if (struct.isSetDelivs()) {
          {
            oprot.writeI32(struct.delivs.size());
            for (long _iter252 : struct.delivs)
            {
              oprot.writeI64(_iter252);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWPD_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.vec = new ArrayList<List<Long>>(_list253.size);
            List<Long> _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              {
                org.apache.thrift.protocol.TList _list256 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem254 = new ArrayList<Long>(_list256.size);
                long _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = iprot.readI64();
                  _elem254.add(_elem257);
                }
              }
              struct.vec.add(_elem254);
            }
          }
          struct.setVecIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list259 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.demands = new ArrayList<Long>(_list259.size);
            long _elem260;
            for (int _i261 = 0; _i261 < _list259.size; ++_i261)
            {
              _elem260 = iprot.readI64();
              struct.demands.add(_elem260);
            }
          }
          struct.setDemandsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list262 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.v_caps = new ArrayList<Long>(_list262.size);
            long _elem263;
            for (int _i264 = 0; _i264 < _list262.size; ++_i264)
            {
              _elem263 = iprot.readI64();
              struct.v_caps.add(_elem263);
            }
          }
          struct.setV_capsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.timeWindows = new ArrayList<List<Long>>(_list265.size);
            List<Long> _elem266;
            for (int _i267 = 0; _i267 < _list265.size; ++_i267)
            {
              {
                org.apache.thrift.protocol.TList _list268 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem266 = new ArrayList<Long>(_list268.size);
                long _elem269;
                for (int _i270 = 0; _i270 < _list268.size; ++_i270)
                {
                  _elem269 = iprot.readI64();
                  _elem266.add(_elem269);
                }
              }
              struct.timeWindows.add(_elem266);
            }
          }
          struct.setTimeWindowsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.serviceTime = new ArrayList<Long>(_list271.size);
            long _elem272;
            for (int _i273 = 0; _i273 < _list271.size; ++_i273)
            {
              _elem272 = iprot.readI64();
              struct.serviceTime.add(_elem272);
            }
          }
          struct.setServiceTimeIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list274 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.pickups = new ArrayList<Long>(_list274.size);
            long _elem275;
            for (int _i276 = 0; _i276 < _list274.size; ++_i276)
            {
              _elem275 = iprot.readI64();
              struct.pickups.add(_elem275);
            }
          }
          struct.setPickupsIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.delivs = new ArrayList<Long>(_list277.size);
            long _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = iprot.readI64();
              struct.delivs.add(_elem278);
            }
          }
          struct.setDelivsIsSet(true);
        }
      }
    }

  }

  public static class solveCVRPTWPD_result implements org.apache.thrift.TBase<solveCVRPTWPD_result, solveCVRPTWPD_result._Fields>, java.io.Serializable, Cloneable, Comparable<solveCVRPTWPD_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("solveCVRPTWPD_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new solveCVRPTWPD_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new solveCVRPTWPD_resultTupleSchemeFactory());
    }

    public List<List<Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(solveCVRPTWPD_result.class, metaDataMap);
    }

    public solveCVRPTWPD_result() {
    }

    public solveCVRPTWPD_result(
      List<List<Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public solveCVRPTWPD_result(solveCVRPTWPD_result other) {
      if (other.isSetSuccess()) {
        List<List<Long>> __this__success = new ArrayList<List<Long>>(other.success.size());
        for (List<Long> other_element : other.success) {
          List<Long> __this__success_copy = new ArrayList<Long>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public solveCVRPTWPD_result deepCopy() {
      return new solveCVRPTWPD_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Long>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Long> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Long>>();
      }
      this.success.add(elem);
    }

    public List<List<Long>> getSuccess() {
      return this.success;
    }

    public solveCVRPTWPD_result setSuccess(List<List<Long>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof solveCVRPTWPD_result)
        return this.equals((solveCVRPTWPD_result)that);
      return false;
    }

    public boolean equals(solveCVRPTWPD_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(solveCVRPTWPD_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("solveCVRPTWPD_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class solveCVRPTWPD_resultStandardSchemeFactory implements SchemeFactory {
      public solveCVRPTWPD_resultStandardScheme getScheme() {
        return new solveCVRPTWPD_resultStandardScheme();
      }
    }

    private static class solveCVRPTWPD_resultStandardScheme extends StandardScheme<solveCVRPTWPD_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, solveCVRPTWPD_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Long>>(_list280.size);
                  List<Long> _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    {
                      org.apache.thrift.protocol.TList _list283 = iprot.readListBegin();
                      _elem281 = new ArrayList<Long>(_list283.size);
                      long _elem284;
                      for (int _i285 = 0; _i285 < _list283.size; ++_i285)
                      {
                        _elem284 = iprot.readI64();
                        _elem281.add(_elem284);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, solveCVRPTWPD_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Long> _iter286 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter286.size()));
                for (long _iter287 : _iter286)
                {
                  oprot.writeI64(_iter287);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class solveCVRPTWPD_resultTupleSchemeFactory implements SchemeFactory {
      public solveCVRPTWPD_resultTupleScheme getScheme() {
        return new solveCVRPTWPD_resultTupleScheme();
      }
    }

    private static class solveCVRPTWPD_resultTupleScheme extends TupleScheme<solveCVRPTWPD_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWPD_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Long> _iter288 : struct.success)
            {
              {
                oprot.writeI32(_iter288.size());
                for (long _iter289 : _iter288)
                {
                  oprot.writeI64(_iter289);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, solveCVRPTWPD_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list290 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Long>>(_list290.size);
            List<Long> _elem291;
            for (int _i292 = 0; _i292 < _list290.size; ++_i292)
            {
              {
                org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _elem291 = new ArrayList<Long>(_list293.size);
                long _elem294;
                for (int _i295 = 0; _i295 < _list293.size; ++_i295)
                {
                  _elem294 = iprot.readI64();
                  _elem291.add(_elem294);
                }
              }
              struct.success.add(_elem291);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
